(ns canvas.core)

(def ^:dynamic *canvas* nil)

(defn color
  ([gray]
   (color gray 255))
  ([gray alpha]
   (color gray gray gray alpha))
  ([r g b]
   (color r g b 255))
  ([r g b alpha]
   #erl[r g b alpha]))

(defn stroke
  [& args]
  (let [pen (wxPen/new (apply color args))]
    (wxDC/setPen *canvas* pen)))

(defn stroke-weight
  [weight]
  (let [pen (wxDC/getPen *canvas*)]
    (wxPen/setWidth pen weight)
    (wxDC/setPen *canvas* pen)))

(defn fill
  [& args]
  (let [brush (wxBrush/new (apply color args))]
    (wxDC/setBrush *canvas* brush)))

(defn fill-rect
  [x y w h]
  (wxDC/drawRectangle *canvas* #erl[x y] #erl[w h]))

(defn circle
  [x y r]
  (wxDC/drawCircle *canvas* #erl[x y] r))

(defmacro defsketch
  [name & opts]
  (let [opts (apply hash-map opts)]
    `(defn ~name []
       (wx_object/start_link :canvas.sketch ~opts #erl()))))
