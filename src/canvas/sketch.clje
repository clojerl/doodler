(ns canvas.sketch
  (:require [canvas.core :as core]))

(def default-frame-rate 24)

(defn frame-interval
  [frame-rate]
  (int (/ 1000 frame-rate)))

(defn make-frame
  [title [x y] [w h]]
  (let [pos #erl[:pos #erl[x y]]
        size #erl[:size #erl[w h]]
        opts #erl(pos size)
        frame (wxFrame/new (wx/new) -1 title opts)]
    frame))

(defn make-canvas
  [frame]
  (wxPanel/new frame))

(defn make-bitmap
  [canvas]
  (let [[w h] (wxWindow/getSize canvas)]
    (wxBitmap/new w h)))

(defn listen
  ([component event-type]
   (wxEvtHandler/connect component :paint))
  ([component event-type callback]
   (if (true? callback)
     (wxEvtHandler/connect component
                           :paint
                           #erl(:callback))
     (wxEvtHandler/connect component
                           :paint
                           #erl(#erl[:callback callback])))))

(defn blit [dc memory-dc]
  (let [size (wxDC/getSize memory-dc)
        origin #erl[0, 0]]
    (wxDC/blit dc origin size memory-dc origin)))

(defn render
  [state]
  (let [{canvas :canvas
         bitmap :bitmap} state
        dc        (wxPaintDC/new canvas)
        memory-dc (wxMemoryDC/new bitmap)]
    (try
      (blit dc memory-dc)
      (finally
        (wxMemoryDC/destroy memory-dc)
        (wxPaintDC/destroy dc)))
    :ok))

(defn handle_sync_event
  [wx obj state]
  (render state)
  :ok)

(defn* handle_info
  ([:draw state]
   (let [{canvas :canvas
          bitmap :bitmap
          opts   :opts} state
         draw      (:draw opts)
         dc        (wxClientDC/new canvas)
         memory-dc (wxMemoryDC/new bitmap)]
     (try
       (binding [core/*canvas* memory-dc]
         (when draw (draw))
         (blit dc memory-dc))
      (finally
        (wxMemoryDC/destroy memory-dc)
        (wxClientDC/destroy dc))))
   #erl[:noreply state])
  ([wx state]
   #erl[:noreply state]))

(defn make-sketch
  [opts]
  (let [frame   (make-frame (or (:title opts) "Sketch")
                            (or (:pos opts) [50 50])
                            (or (:size opts) [500 300]))
        canvas  (make-canvas frame)
        bgcolor (apply core/color (:bgcolor opts))]
    (listen canvas :paint true)
    (wxWindow/setBackgroundColour canvas bgcolor)
    (wxWindow/show frame)

    {:frame frame
     :canvas canvas
     :bitmap (make-bitmap canvas)
     :opts opts}))

(defn init [opts]
  (let [{frame :frame :as state} (make-sketch opts)]
    (timer/send_interval (frame-interval default-frame-rate) :draw)
    #erl[frame state]))
