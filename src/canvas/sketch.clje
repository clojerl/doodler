(ns canvas.sketch
  (:require [canvas.core :as core]))

(def default-frame-rate 60)

(defn frame-interval
  [frame-rate]
  (int (/ 1000 frame-rate)))

(defn make-frame
  [title [x y] [w h]]
  (let [pos #erl[:pos #erl[x y]]
        size #erl[:size #erl[w h]]
        opts #erl(pos size)
        frame (wxFrame/new (wx/new) -1 title opts)]
    frame))

(defn make-panel
  [frame]
  (wxPanel/new frame))

(defn listen
  ([component event-type]
   (wxEvtHandler/connect component :paint #erl(:callback)))
  ([component event-type callback]
   (wxEvtHandler/connect component :paint #erl(#erl[:callback callback]))))

(defn refresh [frame]
  (wxWindow/refresh frame))

(defn handle_sync_event
  [wx obj state]
  (let [{canvas :canvas
         frame :frame
         opts :opts} state
        draw (:draw opts)
        dc (wxPaintDC/new canvas)]
    (try
      (binding [core/*canvas* dc]
        (when draw (draw)))
      (finally
        (wxPaintDC/destroy dc)))
    :ok))

(defn* handle_info
  ([:draw state]
   (refresh (:canvas state))
   #erl[:noreply state])
  ([wx state]
   #erl[:noreply state]))

(defn make-sketch
  [opts]
  (let [frame (make-frame (or (:title opts) "Sketch")
                          (or (:pos opts) [50 50])
                          (or (:size opts) [500 300]))
        canvas (make-panel frame)
        bgcolor (apply core/color (:bgcolor opts))]
    (wxWindow/setBackgroundColour canvas bgcolor)
    (listen canvas :paint)
    (wxWindow/show frame)

    {:frame frame
     :canvas canvas
     :opts opts}))

(defn render
  [draw]
  (when draw (draw)))

(defn init [opts]
  (let [{frame :frame :as state} (make-sketch opts)]
    (timer/send_interval (frame-interval default-frame-rate) :draw)
    #erl[frame state]))
