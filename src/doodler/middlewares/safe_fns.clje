(ns doodler.middlewares.safe-fns
  (:require [clojure.stacktrace :refer [print-stack-trace]]
   [doodler.util :as u]))

(defn- wrap-fn [name function]
  (fn []
    (try
      (function)
      (catch :error e :stack st
        (println "Error in " name " function: " e "\nstacktrace: " (with-out-str (print-stack-trace st)))
        (timer/sleep 1000)))))

(defn- wrap-event-handler [name function]
  (fn [event]
    (try
      (function event)
      (catch :error e :stack st
        (println "Error in " name " function: " e "\nstacktrace: " (with-out-str (print-stack-trace st)))
        (timer/sleep 1000)))))

(def handlers-with-one-argument
  "List of event handlers that receive one argument"
  #{:mouse-entered :mouse-exited
    :mouse-pressed :mouse-released :mouse-clicked
    :mouse-moved :mouse-wheel
    :key-pressed :key-released :key-typed})

(defn safe-fns
  "Wraps all functions in options such that they will not throw exceptions
  If function (for example 'draw') throws an exception - exception is
  caught and printed to stdout and execution of the program is paused for
  1 sec. This way sketch will not be aborted but will continue to run,
  allowing to fix function and reload it on fly."
  [options]
  (into {}
        (for [[name value] options]
          [name (if (u/callable? value)
                  ; :mouse-wheel is a special case as it takes single argument
                  ; while all other fns don't take any arguments
                  (if (name handlers-with-one-argument)
                    (wrap-event-handler name value)
                    (wrap-fn name value))
                  value)])))
