(ns doodler.events)

(def KEY-CODES
  {127 :delete
   300 :start
   311 :caps-lock
   312 :end
   313 :home
   315 :up
   317 :down
   314 :left
   316 :right
   307 :alt
   308 :control
   396 :raw-control
   306 :shift
   340 :f1
   341 :f2
   342 :f3
   343 :f4
   344 :f5
   345 :f6
   346 :f7
   347 :f8
   348 :f9
   349 :f10
   350 :f11
   351 :f12
   352 :f13
   353 :f14
   354 :f15
   355 :f16
   356 :f17
   357 :f18
   358 :f19
   359 :f20
   360 :f21
   361 :f22
   362 :f23
   363 :f24
   364 :numlock
   365 :scroll
   366 :page-up
   367 :page-down})

(def KEY-MAP
  {" " :space})

(def event-names
  [:set_focus     ;; focus-gained
   :kill_focus    ;; focus-lost
   :enter_window  ;; mouse-entered
   :leave_window  ;; mouse-exited
   :left_down     ;; mouse-pressed
   :middle_down   ;; mouse-pressed
   :right_down    ;; mouse-pressed
   :left_up       ;; mouse-released
   :middle_up     ;; mouse-released
   :right_up      ;; mouse-released
   :motion        ;; mouse-moved
   :left_dclick   ;; mouse-clicked (twice)
   :middle_dclick ;; mouse-clicked (twice)
   :right_dclick  ;; mouse-clicked (twice)
   :mousewheel    ;; mouse-wheel
   ;; Listen to all key events
   :key_down      ;; key-pressed
   :key_up        ;; key-released
   :char          ;; key-typed (?)
   ])

(defn* event-type->mouse-event
  ([:enter_window]  :mouse-entered)
  ([:leave_window]  :mouse-exited)
  ([:left_down]     :mouse-pressed)
  ([:middle_down]   :mouse-pressed)
  ([:right_down]    :mouse-pressed)
  ([:left_up]       :mouse-released)
  ([:middle_up]     :mouse-released)
  ([:right_up]      :mouse-released)
  ([:left_dclick]   :mouse-clicked)
  ([:middle_dclick] :mouse-clicked)
  ([:right_dclick]  :mouse-clicked)
  ([:motion]        :mouse-moved)
  ([:mousewheel]    :mouse-wheel))

(defn* event-type->mouse-clicks
  ([:left_dclick]   2)
  ([:middle_dclick] 2)
  ([:right_dclick]  2)
  ([:left_up]       1)
  ([:middle_up]     1)
  ([:right_up]      1)
  ([_]              0))

(defn* event-type->key-event
  ([:key_down] :key-pressed)
  ([:key_up]   :key-released)
  ([:char]     :key-typed))

(defn* event->map
  ([#erl[:wxClose :close_window]]
   #erl{:event :on-close})

  ([#erl[:wxSize :size size rect]]
   #erl{:event :on-resize
        :size size})

  ([#erl[:wxFocus :set_focus window]]
   #erl{:event :focus-gained
        :window window})
  ([#erl[:wxFocus :kill_focus window]]
   #erl{:event :focus-lost
        :window window})

  ([#erl[:wxMouse type
         x y
         left middle right
         control shift alt meta
         wheel-rotation wheel-delta lines-per-action]]
   #erl{:event (event-type->mouse-event type)
        :clicks (event-type->mouse-clicks type)
        :x x :y y
        :button (cond left :left middle :middle right :right :else nil)
        :left left :middle middle :right right
        :modifiers [(when alt :alt)
                    (when shift :shift)
                    (when control :control)
                    (when meta :meta)]
        :control control :shift shift :alt alt :meta meta
        :wheel-rotation wheel-rotation :wheel-delta wheel-delta
        :lines-per-action lines-per-action})

  ([#erl[:wxKey type
         x y
         key-code
         control shift alt meta
         uni-char raw-code raw-flags]]
   #erl{:event (event-type->key-event type)
        :x x :y y
        :key-code key-code
        :modifiers [(when alt :alt)
                    (when shift :shift)
                    (when control :control)
                    (when meta :meta)]
        :control control :shift shift :alt alt :meta meta
        :uni-char uni-char :raw-code raw-code :raw-flags raw-flags}))

(defn listen
  "Registers this component to listen events of the specified
  event-type"
  ([component event-type & opts]
   (let [opts (apply hash-map opts)
         opts (reduce (fn [acc [k v]]
                        (if (and (= k :callback) (true? v))
                          (conj acc :callback)
                          (conj acc #erl[k v])))
                      #erl()
                      opts)]
     (wxEvtHandler/connect component event-type opts))))
