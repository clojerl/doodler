(ns doodler.examples.mandelbrot
  (:require [doodler.core :as d]
            [doodler.middlewares.state-mode :as state-mode]))

(def MAX-ITERATIONS 255)
(def POINTS-PER-FRAME 500)

(defn points
  []
  (shuffle (for [x (range (d/width))
                 y (range (d/height))]
             #erl[x y])))

(defn ->complex
  [x y w h minx miny wh]
  #erl[(+ minx (* wh (/ x w)))
       (+ miny (* wh (/ y h)))])

(defn ->color
  [n max-iters]
  (erlang/div (* 255 n) max-iters))

(defn mandelbrot [x y max-iters]
  (loop [a 0.0
         b 0.0
         n 0]
    (if (or (< max-iters n)
            (< 2 a)
            (< 2 b))
      n
      (recur (+ x (- (* a a) (* b b)))
             (+ y (* 2.0 (* a b)))
             (inc n)))))

(defn mandelbrot-point [x y w h minx miny wh max-iters]
  (let* [#erl[i j] (->complex x y w h minx miny wh)
         n         (mandelbrot i j max-iters)
         color     (->color n max-iters)]
    #erl[x y color]))

(defn recalulate-bounds
  [x y minx miny wh]
  (let [[x' y'] (->complex x y
                           (d/width) (d/height)
                           minx miny
                           wh)
        wh' (* 0.6 wh)
        minx' (- x' (/ wh' 2))
        miny' (- y' (/ wh' 2))]
    {:minx minx'
     :miny miny'
     :wh wh'}))

(defn on-mouse-clicked
  [{minx :minx miny :miny wh :wh :as state} event]
  (when-not (d/looping?)
    (d/start-loop))
  (d/background 0)
  (merge state
         (recalulate-bounds (:x event) (:y event) minx miny wh)
         {:points (points)
          :m-points nil}))

(defn setup
  []
  (d/frame-rate 40)
  {:points (points)
   :m-points nil
   :minx -2.5
   :miny -2.0
   :wh 4.0})

(defn update-state
  [{points :points :as state}]
  (if-not points
    (do
      (d/no-loop)
      state)
    (let [max-iters   MAX-ITERATIONS
          w           (d/width)
          h           (d/height)
          {minx :minx
           miny :miny
           wh   :wh}  state]
      (loop* [#erl(#erl[x y] & rest) points
              m-points #erl()
              n 0]
        (if (and (< n POINTS-PER-FRAME) (seq rest))
          (recur rest
                 (conj m-points (mandelbrot-point x y w h minx miny wh max-iters))
                 (inc n))
          (assoc state
                 :points (seq rest)
                 :m-points m-points))))))

(defn draw
  [state]
  (doseq [[x y color] (:m-points state)]
    (d/stroke color)
    (d/point x y)))

(d/defsketch sketch
  :title "Mandelbrot"
  :size [300 300]
  :setup setup
  :update update-state
  :mouse-clicked on-mouse-clicked
  :draw draw
  :bgcolor [0]
  :features [:keep-on-top]
  :middleware [state-mode/state-mode])
