(ns doodler.examples.events
  (:require [doodler.core :as d]))

(defn report-event-fn
  [event-key]
  (fn
    ([] (prn event-key))
    ([evt] (prn event-key evt))))

(defn setup
  []
  (d/frame-rate 24))

(defn draw []
  (when (d/mouse-pressed?)
    (println (d/mouse-button))
    (println :mouse-x (d/mouse-x)
             :mouse-y (d/mouse-y)
             :pmouse-x (d/pmouse-x)
             :pmouse-y (d/pmouse-y)))

  (when (d/key-pressed?)
    (println :key-code (d/key-code)
             :key-modifiers (d/key-modifiers)
             :key-as-keyword (d/key-as-keyword)))

  (d/stroke (d/random 255))
  (d/stroke-weight (d/random 10))
  (d/fill (d/random 255))
  (let [diam (d/random 50)]
    (d/ellipse (d/mouse-x) (d/mouse-y) diam diam)))

(d/defsketch sketch
  :title "Handling events"
  :size [323 200]
  :bgcolor [200]
  :setup setup
  :draw draw
  :features [:resizable :keep-on-top]
  ;; Event handlers
  :on-close (report-event-fn :on-close)
  :focus-gained (report-event-fn :focus-gained)
  :focus-lost (report-event-fn :focus-lost)
  :mouse-pressed (report-event-fn :mouse-pressed)
  :mouse-released (report-event-fn :mouse-released)
  :mouse-clicked (report-event-fn :mouse-clicked)
  :mouse-entered (report-event-fn :mouse-entered)
  :mouse-exited (report-event-fn :mouse-exited)
  :mouse-moved (report-event-fn :mouse-moved)
  :mouse-wheel (report-event-fn :mouse-wheel)
  :key-pressed (report-event-fn :key-pressed)
  :key-released (report-event-fn :key-released)
  :key-typed (report-event-fn :key-typed))
