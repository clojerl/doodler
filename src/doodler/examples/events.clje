(ns doodler.examples.events
  (:require [doodler.core :as d]
            [doodler.middlewares.state-mode :as state-mode]))

(defn on-close
  [state]
  (prn state))

(defn report-event-fn
  [event-key]
  (fn
    ([state] (prn event-key) state)
    ([state evt] (prn event-key evt) state)))

(defn mouse-move
  [state evt]
  {:x (:x evt) :y (:y evt)})

(defn setup
  []
  (d/frame-rate 24)
  {:x 0 :y 0})

(defn draw [state]
  (d/stroke (d/random 255))
  (d/stroke-weight (d/random 10))
  (d/fill (d/random 255))
  (let [diam (d/random 50)]
    (d/ellipse (:x state) (:y state) diam diam)))

(d/defsketch sketch
  :title "Handling events"
  :size [323 200]
  :bgcolor [200]
  :setup setup
  :draw draw
  :features [:resizable :keep-on-top :exit-on-close]
  ;; Use state-mode
  :middleware [state-mode/state-mode]

  ;; Event handlers
  :on-close on-close
  :focus-gained (report-event-fn :focus-gained)
  :focus-lost (report-event-fn :focus-lost)
  :mouse-pressed (report-event-fn :mouse-pressed)
  :mouse-released (report-event-fn :mouse-released)
  :mouse-entered (report-event-fn :mouse-entered)
  :mouse-exited (report-event-fn :mouse-exited)
  :mouse-moved mouse-move
  :mouse-wheel (report-event-fn :mouse-wheel)
  :key-pressed (report-event-fn :key-pressed)
  :key-released (report-event-fn :key-released)
  :key-typed (report-event-fn :key-typed))
