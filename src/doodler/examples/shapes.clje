(ns doodler.examples.shapes
  (:require [doodler.core :as d]))

(defn setup
  []
  (d/frame-rate 10))

(defn draw []
  (d/background 200)

  (d/stroke (rand-int 255))
  (d/stroke-weight (rand-int 3))
  (d/fill (rand-int 255))

  (d/ellipse 20 20 20 20)
  (d/rect 10 60 20 20)
  (d/rect 10 85 20 20 5)
  (d/line 10 130 80 140)
  (d/arc 10 55 50 50 (- d/QUARTER-PI) 0.0)
  (when-not (= :opengl (:renderer d/*sketch*))
    (d/bezier 50 250
              (rand-int (d/width)) (rand-int (d/height))
              (rand-int (d/width)) (rand-int (d/height))
              250 250))

  (d/begin-shape)
  (dotimes [_ 5]
    (d/vertex (rand-int (d/width)) (rand-int (d/height)))
    (when-not (= :opengl (:renderer d/*sketch*))
      (d/bezier-vertex (rand-int (d/width)) (rand-int (d/height))
                       (rand-int (d/width)) (rand-int (d/height))
                       (rand-int (d/width)) (rand-int (d/height)))
      (d/quadratic-vertex (rand-int (d/width)) (rand-int (d/height))
                          (rand-int (d/width)) (rand-int (d/height)))))
  (d/end-shape)

  (d/text (str "Fill: " (d/current-fill)) 100 10)
  (d/text (str "Stroke: " (d/current-stroke)) 100 30)
  (d/text (str "Frame #: " (d/frame-count)) 100 50)
  (d/text (str "Target Frame Rate: " (d/target-frame-rate)) 100 70)
  (d/text (str "Frame Rate: " (d/current-frame-rate)) 100 90))

(d/defsketch sketch
  :title "Shapes"
  :size [300 300]
  :setup setup
  :draw draw
  :features [:resizable :keep-on-top]
  :bgcolor [200])
