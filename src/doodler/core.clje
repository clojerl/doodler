(ns doodler.core
  (:require [doodler.util :as u]))

(def ^:dynamic *canvas* nil)

(def ^:dynamic *sketch* nil)

(defn internal-state []
  (:internal-state *sketch*))

(defn state-atom
  []
  (:state *sketch*))

(defn state
  ([] @(state-atom))
  ([key] (get (state) key)))

(defn set-state!
  "Set sketch-specific state. May only be called once (ideally in the
  setup fn).  Subsequent calls have no effect."
  [& state-vals]
  (let [state* (state-atom)]
    (when-not @state*
      (let [state-map (apply hash-map state-vals)]
        (reset! state* state-map)))))

(defn color
  ([gray]
   (color gray 255))
  ([gray alpha]
   (color gray gray gray alpha))
  ([r g b]
   (color r g b 255))
  ([r g b alpha]
   #erl[r g b alpha]))

(defn stroke
  [& args]
  (let [pen (wxDC/getPen *canvas*)]
    (wxPen/setColour pen (apply color args))
    (wxDC/setPen *canvas* pen)))

(defn stroke-weight
  [weight]
  (let [pen (wxDC/getPen *canvas*)]
    (wxPen/setWidth pen weight)
    (wxDC/setPen *canvas* pen)))

(defn background
  [& args]
  (let [brush (wxDC/getBackground *canvas*)]
    (wxBrush/setColour brush (apply color args))
    (wxDC/setBackground *canvas* brush)
    (wxDC/clear *canvas*)))

(defn fill
  [& args]
  (let [brush (wxDC/getBrush *canvas*)]
    (wxBrush/setColour brush (apply color args))
    (wxDC/setBrush *canvas* brush)))

(defn fill-rect
  [x y w h]
  (wxDC/drawRectangle *canvas* #erl[x y] #erl[w h]))

(defn point
  [x y]
  (wxDC/drawPoint *canvas* (tuple x y)))

(defn circle
  [x y r]
  (wxDC/drawCircle *canvas* #erl[x y] r))

(defn width
  []
  (first (wxDC/getSize *canvas*)))

(defn height
  []
  (second (wxDC/getSize *canvas*)))

(defn frame-rate
  [new-rate]
  (let [internal-state (internal-state)
        timer-ref (:timer-ref @internal-state)]
    (u/remove-timer timer-ref)
    (swap! internal-state
           assoc
           :timer-ref
           (u/create-timer new-rate))))

(defmacro defsketch
  [name & opts]
  (let [opts (apply hash-map opts)]
    `(defn ~name []
       (wx_object/start_link :doodler.sketch ~opts #erl()))))
