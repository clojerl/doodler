(ns doodler.core
  (:require [doodler.util :as u]))

(def ^:dynamic *canvas* nil)

(def ^:dynamic *sketch* nil)

(def ^:dynamic *state* nil)

(def ^:dynamic *internal-state* nil)

(defn state
  ([] *state*)
  ([key] (get *state* key)))

(defn set-state!
  "Set sketch-specific state. May only be called once (ideally in the
  setup fn).  Subsequent calls have no effect."
  [& state-vals]
  (when-not *state*
    (let [state-map (apply hash-map state-vals)]
      (set! *state* state-map))))

(defn swap-state!
  "Set sketch-specific state. May only be called once (ideally in the
  setup fn).  Subsequent calls have no effect."
  [f & args]
  (set! *state* (apply f *state* args)))

(defn color
  ([gray]
   (color gray 255))
  ([gray alpha]
   (color gray gray gray alpha))
  ([r g b]
   (color r g b 255))
  ([r g b alpha]
   #erl[r g b alpha]))

(defn stroke
  [& args]
  (let [pen (wxDC/getPen *canvas*)]
    (wxPen/setColour pen (apply color args))
    (wxDC/setPen *canvas* pen)))

(defn stroke-weight
  [weight]
  (let [pen (wxDC/getPen *canvas*)]
    (wxPen/setWidth pen weight)
    (wxDC/setPen *canvas* pen)))

(defn background
  [& args]
  (let [brush (wxDC/getBackground *canvas*)]
    (wxBrush/setColour brush (apply color args))
    (wxDC/setBackground *canvas* brush)
    (wxDC/clear *canvas*)))

(defn fill
  [& args]
  (let [brush (wxDC/getBrush *canvas*)]
    (wxBrush/setColour brush (apply color args))
    (wxDC/setBrush *canvas* brush)))

(defn arc
  [x y w h start end]
  (wxDC/drawEllipticArc *canvas* #erl[x y] #erl[w h] start end))

(defn ellipse
  [x y w h]
  (wxDC/drawEllipse *canvas* #erl[x y] #erl[w h]))

(defn rect
  [x y w h]
  (wxDC/drawRectangle *canvas* #erl[x y] #erl[w h]))

(defn point
  [x y]
  (wxDC/drawPoint *canvas* (tuple x y)))

(defn width
  []
  (erlang/element 1 (wxDC/getSize *canvas*)))

(defn height
  []
  (erlang/element 2 (wxDC/getSize *canvas*)))

(defn frame-rate
  [new-rate]
  (set! *internal-state*
        (assoc *internal-state*
               :frame-rate new-rate
               :frame-interval (u/frame-interval new-rate))))

(defmacro defsketch
  [name & opts]
  (let [opts (apply hash-map opts)]
    `(defn ~name []
       (wx_object/start_link :doodler.sketch ~opts #erl()))))
