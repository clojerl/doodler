(ns doodler.sketch
  (:require [doodler.core :as core]
            [doodler.events :as e]
            [doodler.util :as u]
            [doodler.wx.gui :as gui]
            [doodler.middlewares.safe-fns :refer [safe-fns]]))

(def default-frame-rate 60)

(defn make-bitmap
  "Creates a bitmap the same size as the provided canvas.
  Returns a map with bitmap and canvas related information to
  avoid having to fetch it while drawing.

    :bitmap        The bitmap
    :bitmap-dc     Device context for the bitmap

    :background-brush, :brush, :pen
                   References to the DC's elements

    :width         Bitmap's width
    :height        Bitmap's height
  "
  [canvas]
  (let [[w h]     (wxWindow/getSize canvas)
        bitmap    (wxBitmap/new w h)
        bitmap-dc (wxMemoryDC/new bitmap)]
    {:bitmap           bitmap
     :bitmap-dc        bitmap-dc
     :background-brush (wxDC/getBackground bitmap-dc)
     :brush            (wxDC/getBrush bitmap-dc)
     :pen              (wxDC/getPen bitmap-dc)
     :width            w
     :height           h}))

(defmacro with-sketch
  [sketch & body]
  `(let [{bitmap-dc#      :bitmap-dc
          state#          :state} ~sketch]
    (binding [doodler.core/*sketch* ~sketch
              doodler.core/*canvas* bitmap-dc#
              doodler.core/*state*  state#]
      ~@body
      (assoc doodler.core/*sketch*
             :state doodler.core/*state*))))

(defn blit [dest source]
  (let [size (wxDC/getSize source)
        origin #erl[0 0]]
    (wxDC/blit dest origin size source origin)))

(defn refresh
  [sketch]
  (wxWindow/refresh (:canvas sketch)
                    #erl(#erl[:eraseBackground false]))
  sketch)

(defn calculate-frame-rate
  [current-frame-rate time-mark p-time-mark]
  (+ (* 0.9 current-frame-rate)
     (* 0.1 (/ 1000 (- time-mark p-time-mark)))))

(defn next-refresh
  [sketch time-mark]
  (let [period      (sketch :frame-period)
        p-time-mark (sketch :time-mark)
        correction  (erlang/div (- time-mark p-time-mark period) 2)
        prev-delay  (sketch :frame-delay)
        delay       (max 0 (- prev-delay correction))
        current-frame-rate (sketch :current-frame-rate)]
    #_(prn :correction correction
         :delay delay
         :frame-period period
         :current-frame-rate current-frame-rate)
    (u/send-after delay :refresh)
    (assoc sketch
           :current-frame-rate (calculate-frame-rate current-frame-rate
                                                     time-mark
                                                     p-time-mark)
           :p-time-mark p-time-mark
           :time-mark time-mark
           :frame-delay delay
           :frame-count (inc (sketch :frame-count)))))

(defn on-paint
  [{bitmap :bitmap canvas :canvas pid :pid}]
  (doodler.wx/batch
   #(let [dc (wxPaintDC/new canvas)]
      (try
        (wxDC/drawBitmap dc bitmap #erl[0 0])
        (finally
          (wxPaintDC/destroy dc)))))
  (u/send-message pid #erl[:draw (u/time-mark)]))

(defn on-draw
  [sketch f]
  (with-sketch sketch
    (doodler.wx/batch f)))

(defn on-resize
  [sketch]
  (wxMemoryDC/destroy (:bitmap-dc sketch))
  (wxBitmap/destroy (:bitmap sketch))
  (merge sketch (make-bitmap (:canvas sketch))))

(def ^{:private true}
  supported-features
  #{:resizable :exit-on-close :keep-on-top
    :present :no-safe-fns :no-bind-output})

(defn make-sketch
  [opts]
  (let [middleware  (->> (:middleware opts [identity])
                         (apply comp))
        opts        (middleware opts) ;; apply middleware

        features    (let [user-features (set (:features opts))]
                        (reduce #(assoc %1 %2 (contains? user-features %2)) {}
                                supported-features))

        opts        (if (:no-safe-fns features)
                      opts
                      (safe-fns opts))

        frame       (gui/make-frame (or (:title opts) "Sketch")
                                    (or (:pos opts) [-1 -1]) ;; default position
                                    (or (:size opts) [500 300])
                                    features)
        canvas      (gui/make-canvas frame)

        bgcolor     (when-let [bgcolor (:bgcolor opts)]
                      (apply core/color bgcolor))

        draw-fn     (or (:draw opts) u/no-fn)
        setup-fn    (or (:setup opts) u/no-fn)
        on-close-fn (let [close-fn (or (:on-close opts) u/no-fn)]
                      (if (:exit-on-close features)
                        (fn []
                          (close-fn)
                          (erlang/halt 0))
                        close-fn))

        frame-period (u/frame-period default-frame-rate)

        priv-dir    (-> (code/priv_dir :doodler)
                        (erlang/list_to_binary))
        icon       #(-> priv-dir
                        (str "/icon-" % ".ico"))
        icon-bundle (reduce (fn [bundle size]
                              (wxIconBundle/addIcon bundle (icon size) 3)
                              bundle)
                            (wxIconBundle/new)
                            [16 32 128 256 512 1024])]

    ;; Paint events need to be handled synchronously
    (e/listen canvas :paint :callback true)
    ;; When resizing the frame we should resize the bitmap
    (e/listen frame :size :skip true)
    (e/listen frame :close_window) ;; on-close

    ;; Listen to all mouse events
    (doseq [event-name e/event-names]
      (e/listen canvas event-name))

    ;; Set background color before showing the frame
    (when bgcolor
      (wxWindow/setBackgroundColour canvas bgcolor))

    ;; Show frame, maybe in fullscreen
    (wxFrame/showFullScreen frame (:present features))
    (wxWindow/show frame)

    ;; Set icon
    (wxTopLevelWindow/setIcons frame icon-bundle)

    ;; Signal to trigger the setup phase
    (u/send-message :setup)

    (merge opts
           {:state nil
            :pid (erlang/self)
            :frame frame
            :canvas canvas

            :setup-fn setup-fn
            :draw-fn draw-fn
            :on-resize on-resize
            :on-close on-close-fn

            :frame-rate default-frame-rate
            :frame-period frame-period
            :frame-delay frame-period
            :current-frame-rate default-frame-rate

            :looping? true
            :frame-count 0
            :epoch (u/time-mark)
            :p-time-mark (u/time-mark)
            :time-mark (inc (u/time-mark))}

            ;; Create bitmap after frame is visible to
           ;; get the right dimensions
           (make-bitmap canvas))))

;; Callbacks

(defn handle_sync_event
  [wx obj sketch]
  (on-paint sketch)
  :ok)

(defn handle_event
  [wx sketch]
  (let* [#erl[:wx id obj data event] wx
         event (e/event->map event)
         event-key (:event event)
         handler (event-key sketch)]
    (if-not handler
      (u/noreply sketch)
      (case event-key
        :on-close
        (u/stop (with-sketch sketch
                  (handler)))
        :focus-gained
        (u/noreply (with-sketch sketch
                     (handler)))
        :focus-lost
        (u/noreply (with-sketch sketch
                     (handler)))

        :on-resize
        (u/noreply (handler sketch))

        _
        (u/noreply
         (with-sketch sketch
           (handler event)))))))

(defn* handle_info
  ([:setup sketch]
   (-> sketch
       (on-draw (:setup-fn sketch))
       refresh
       u/noreply))
  ([:refresh sketch]
   (-> sketch
       refresh
       u/noreply))
  ([#erl[:draw time-mark] sketch]
   (u/noreply
    (if (:looping? sketch)
      (-> sketch
          (on-draw (:draw-fn sketch))
          (next-refresh time-mark))
      sketch)))
  ([wx sketch]
   (u/noreply sketch)))

(defn init [opts]
  (let [{frame :frame :as sketch} (make-sketch opts)]
    #erl[frame sketch]))
