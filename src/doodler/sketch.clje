(ns doodler.sketch
  (:require [doodler.core :as core]
            [doodler.events :as e]
            [doodler.protocols :as p]
            [doodler.util :as u]
            [doodler.wx.gui :as gui]
            [doodler.wx.opengl :as wx.opengl]
            [doodler.wx.panel :as wx.panel]
            [doodler.middlewares.safe-fns :refer [safe-fns]]))

(def default-frame-rate 60)

(defmacro with-sketch
  [sketch & body]
  `(let [{canvas# :canvas
          state#  :state} ~sketch]
     (binding [doodler.core/*sketch* ~sketch
               doodler.core/*canvas* canvas#
               doodler.core/*state*  state#]
       ~@body
       (assoc doodler.core/*sketch*
              :state doodler.core/*state*))))

#_(defn blit [dest source]
  (let [size (wxDC/getSize source)
        origin #erl[0 0]]
    (wxDC/blit dest origin size source origin)))

(defn refresh
  [sketch]
  (p/refresh (:canvas sketch))
  sketch)

(defn calculate-frame-rate
  [current-frame-rate time-mark p-time-mark]
  (+ (* 0.9 current-frame-rate)
     (* 0.1 (/ 1000 (- time-mark p-time-mark)))))

(defn next-refresh
  [sketch time-mark]
  (let [period      (sketch :frame-period)
        p-time-mark (sketch :time-mark)
        correction  (erlang/div (- time-mark p-time-mark period) 2)
        prev-delay  (sketch :frame-delay)
        delay       (max 0 (- prev-delay correction))
        current-frame-rate (sketch :current-frame-rate)]
    #_(prn :correction correction
         :delay delay
         :frame-period period
         :current-frame-rate current-frame-rate)
    (u/send-after delay :refresh)
    (assoc sketch
           :current-frame-rate (calculate-frame-rate current-frame-rate
                                                     time-mark
                                                     p-time-mark)
           :p-time-mark p-time-mark
           :time-mark time-mark
           :frame-delay delay
           :frame-count (inc (sketch :frame-count)))))

(defn on-paint
  [{canvas :canvas pid :pid}]
  (wx/batch #(p/paint canvas))
  (u/send-message pid #erl[:draw (u/time-mark)]))

(defn on-draw
  [sketch f]
  (with-sketch sketch
    (wx/batch #(do (p/pre-draw core/*canvas*)
                   (f)
                   (p/post-draw core/*canvas*)))))

(defn on-resize
  [sketch]
  (update sketch :canvas p/resize-canvas))

(def ^{:private true}
  supported-features
  #{:resizable :exit-on-close :keep-on-top
    :present :no-safe-fns :no-bind-output})

(defn make-sketch
  [opts]
  (let [middleware  (->> (:middleware opts [identity])
                         (apply comp))
        opts        (middleware opts) ;; apply middleware

        features    (let [user-features (set (:features opts))]
                        (reduce #(assoc %1 %2 (contains? user-features %2)) {}
                                supported-features))

        opts        (if (:no-safe-fns features)
                      opts
                      (safe-fns opts))

        [w h]       (or (:size opts) [500 300])
        frame       (gui/make-frame (or (:title opts) "Sketch")
                                    (or (:pos opts) [-1 -1]) ;; default position
                                    [w h]
                                    features)

        bgcolor     (let [bgcolor (:bgcolor opts [200])]
                      (apply core/color bgcolor))

        renderer    (:renderer opts :panel)

        canvas      (case renderer
                      :opengl (wx.opengl/make-canvas frame bgcolor)
                      :panel  (wx.panel/make-canvas frame bgcolor))

        draw-fn     (or (:draw opts) u/no-fn)
        setup-fn    (or (:setup opts) u/no-fn)
        on-close-fn (let [close-fn (or (:on-close opts) u/no-fn)]
                      (if (:exit-on-close features)
                        (fn []
                          (close-fn)
                          (erlang/halt 0))
                        close-fn))

        frame-period (u/frame-period default-frame-rate)]

    ;; Paint events need to be handled synchronously
    (e/listen (p/canvas canvas) :paint :callback true)
    ;; When resizing the frame we should resize the bitmap
    (e/listen frame :size :skip true)
    (e/listen frame :close_window) ;; on-close

    ;; Listen to all mouse events
    (doseq [event-name e/event-names]
      (e/listen (p/canvas canvas) event-name))

    ;; Show frame, maybe in fullscreen
    (wxFrame/showFullScreen frame (:present features))
    (wxWindow/show frame)

    ;; Signal to trigger the setup phase
    (u/send-message :setup)

    (merge opts
           {;; Information
            :state nil
            :pid (erlang/self)
            :frame frame
            :canvas canvas
            :renderer renderer

            ;; Event handlers and callbacks
            :setup-fn setup-fn
            :draw-fn draw-fn
            :on-resize on-resize
            :on-close on-close-fn

            ;; Frame rate configuration
            :frame-rate default-frame-rate
            :frame-period frame-period
            :frame-delay frame-period
            :current-frame-rate default-frame-rate

            ;; Event related info
            :mouse-x 0
            :mouse-y 0
            :pmouse-x 0
            :pmouse-y 0
            :wheel-rotation 0

            ;; Keys
            :keys-pressed #{}

            ;; Window
            :focused true

            ;; Camera (used for orbit control)
            :camera (process-val! [0 0 (/ h 2 (math/tan (/ (math/pi) 6)))
                                   0 0 0
                                   0 1 0])

            ;; Loop control
            :looping? true
            :frame-count 0
            :epoch (u/time-mark)
            :p-time-mark (u/time-mark)
            :time-mark (inc (u/time-mark))})))

;; Callbacks

(defn handle_sync_event
  [wx obj sketch]
  (on-paint sketch)
  :ok)

(defn- register-keys-pressed
  "Registers the key-code of the provided key-press event, unless
  its key-code is 0. This is because when swtiching between windows
  with the keyboard, a `:key-press` event (with `(= :key-code 0)`)
  is reported for which there is no matching `:key-release` event."
  [sketch {:keys [key-code] :as _event}]
  (if (zero? key-code)
    (assoc sketch :keys-pressed #{})
    (update sketch :keys-pressed conj key-code)))

(defn- add-event-info
  "Add event specific information depending on the type of event.
  This information is then used in the core functions to identify
  if an event is currently happening (e.g. `mouse-pressed?`) or details
  about a certain event (e.g. `key-as-keyword`)."
  [sketch event]
  (let [event-key (:event event)]
    (case* event-key
      :focus-gained
      (assoc sketch :focused true)

      :focus-lost
      ;; Clean up the list of keys pressed when
      ;; the sketch looses focus, since the key release
      ;; won't be processed by the sketch.
      (assoc sketch
             :keys-pressed #{}
             :focused false)

      :mouse-pressed
      (assoc sketch
             :mouse-button (:button event)
             :mouse-pressed? true
             :key-modifiers (:modifiers event))

      :mouse-released
      (assoc sketch
             :mouse-button nil
             :mouse-pressed? false
             :key-modifiers (:modifiers event))

      :mouse-moved
      (assoc sketch
             :mouse-x (:x event)
             :mouse-y (:y event)
             :pmouse-x (:mouse-x sketch)
             :pmouse-y (:mouse-y sketch)
             :key-modifiers (:modifiers event))

      :mouse-wheel
      (assoc sketch :wheel-rotation (:wheel-rotation event))

      :key-pressed
      (-> sketch
          (register-keys-pressed event)
          (assoc :key-code (:key-code event)
                 :key-unicode (:uni-char event)
                 :key-modifiers (:modifiers event)))

      :key-released
      (-> sketch
          (update :keys-pressed disj (:key-code event))
          (assoc :key-code (:key-code event)
                 :key-unicode (:uni-char event)
                 :key-modifiers (:modifiers event)))

      _
      sketch)))

(defn handle_event
  [wx sketch]
  (let* [#erl[:wx id obj data event] wx
         event (e/event->map event)
         event-key (:event event)
         handler (event-key sketch)
         sketch (add-event-info sketch event)]
    (if-not handler
      (u/noreply sketch)
      (case* event-key
        :on-close
        (u/stop
         (with-sketch sketch
           (handler)))

        :focus-gained
        (u/noreply
         (with-sketch sketch
           (handler)))

        :focus-lost
        (u/noreply
         (with-sketch sketch
           (handler)))

        :on-resize
        (u/noreply (handler sketch))

        :mouse-wheel
        (u/noreply
         (with-sketch sketch
           (handler (:wheel-rotation event))))

        _
        (u/noreply
         (with-sketch sketch
           (handler event)))))))

(defn* handle_info
  ([:setup sketch]
   (-> sketch
       (on-draw (:setup-fn sketch))
       refresh
       u/noreply))
  ([:refresh sketch]
   (-> sketch
       refresh
       u/noreply))
  ([#erl[:draw time-mark] sketch]
   (u/noreply
    (if (:looping? sketch)
      (-> sketch
          (on-draw (:draw-fn sketch))
          (next-refresh time-mark))
      sketch)))
  ([wx sketch]
   (u/noreply sketch)))

(defn init [opts]
  (let [{frame :frame :as sketch} (make-sketch opts)]
    #erl[frame sketch]))
