(ns doodler.sketch
  (:require [doodler.core :as core]
            [doodler.util :as u]))

(def SYSTEM_MENU 2048)
(def RESIZE_BORDER 64)
(def MINIMIZE_BOX 1024)
(def MAXIMIZE_BOX 512)
(def CAPTION 536870912)
(def CLIP_CHILDREN 4194304)
(def CLOSE_BOX 4096)
(def STAY_ON_TOP, 32768)

(def DEFAULT_FRAME_STYLE
  (bit-or SYSTEM_MENU
          MINIMIZE_BOX
          CLOSE_BOX
          CAPTION
          CLIP_CHILDREN))

(def feature->style {:keep-on-top [STAY_ON_TOP]
                     :resizable   [RESIZE_BORDER MAXIMIZE_BOX]})

(def default-frame-rate 60)

(defn frame-style
  [features]
  (reduce (fn [style [name active?]]
            (if (and active? (feature->style name))
              (apply bit-or style (feature->style name))
              style))
          DEFAULT_FRAME_STYLE
          features))

(defn make-frame
  [title [x y] [w h] features]
  (let [pos         #erl[:pos #erl[x y]]
        size        #erl[:size #erl[w h]]
        style       #erl[:style (frame-style features)]
        frame-opts  #erl(pos size style)]
    (wxFrame/new (wx/new) -1 title frame-opts)))

(defn make-canvas
  [frame]
  (wxPanel/new frame))

(defn make-bitmap
  [canvas]
  (let [[w h] (wxWindow/getSize canvas)]
    (wxBitmap/new w h)))

(defn listen
  ([component event-type & opts]
   (let [opts (apply hash-map opts)
         opts (reduce (fn [acc [k v]]
                        (if (and (= k :callback) (true? v))
                          (conj acc :callback)
                          (conj acc #erl[k v])))
                      #erl()
                      opts)]
     (wxEvtHandler/connect component event-type opts))))

(defn blit [dest source]
  (let [size (wxDC/getSize source)
        origin #erl[0, 0]]
    (wxDC/blit dest origin size source origin)))

(defn render
  [sketch f ctx]
  (let [{canvas :canvas
         bitmap :bitmap
         state  :state} sketch
        dc        (if (= ctx :paint)
                    (wxPaintDC/new canvas)
                    (wxClientDC/new canvas))
        memory-dc (wxMemoryDC/new bitmap)]
    (try
      (binding [core/*sketch* sketch
                core/*canvas* memory-dc
                core/*state*  state]
        (f)
        (blit dc memory-dc)
        (assoc sketch :state core/*state*))
      (finally
        (wxMemoryDC/destroy memory-dc)
        (if (= ctx :paint)
          (wxPaintDC/destroy dc)
          (wxClientDC/destroy dc))))))

(defn on-resize
  [sketch]
  (let [old-bitmap (:bitmap sketch)
        old-dc     (wxMemoryDC/new old-bitmap)
        bitmap     (make-bitmap (:canvas sketch))
        dc         (wxMemoryDC/new bitmap)]
    (try
      (blit dc old-dc)
      (finally
        (wxMemoryDC/destroy old-dc)
        (wxMemoryDC/destroy dc)
        (wxBitmap/destroy old-bitmap)))
    (assoc sketch :bitmap bitmap)))

(def ^{:private true}
  supported-features
  #{:resizable :exit-on-close :keep-on-top
    :present :no-safe-fns :no-bind-output})

(defn make-sketch
  [opts]
  (let [middleware  (->> (:middleware opts [identity])
                         (apply comp))
        opts        (middleware opts) ;; apply middleware

        features    (let [user-features (set (:features opts))]
                        (reduce #(assoc %1 %2 (contains? user-features %2)) {}
                                supported-features))

        frame       (make-frame (or (:title opts) "Sketch")
                                (or (:pos opts) [-1 -1]) ;; default position
                                (or (:size opts) [500 300])
                                features)
        canvas      (make-canvas frame)

        bgcolor     (apply core/color (:bgcolor opts))

        draw-fn     (or (:draw opts) u/no-fn)
        setup-fn    (or (:setup opts) u/no-fn)
        on-close-fn (let [close-fn (or (:on-close opts) u/no-fn-state)]
                      (if (:exit-on-close features)
                        (fn [_]
                          (close-fn sketch)
                          (erlang/halt 0))
                        close-fn))

        state       nil]

    ;; Synchronously handle paint events
    (listen canvas :paint :callback true)
    ;; When resizing the frame we should resize the bitmap
    (listen frame :size :skip true)
    (listen frame :close_window)

    ;; Set background color before showing the frame
    (wxWindow/setBackgroundColour canvas bgcolor)

    ;; Show frame, maybe in fullscreen
    (wxFrame/showFullScreen frame (:present features))
    (wxWindow/show frame)

    ;; Signal to trigger the setup phase
    (timer/send_after 0 :setup)

    (merge opts
           {:state state
            :internal-state (atom {})
            :frame frame
            :canvas canvas
            ;; Create bitmap after frame is visible to
            ;; get the right dimensions
            :bitmap (make-bitmap canvas)
            :setup-fn setup-fn
            :draw-fn draw-fn
            :on-resize on-resize
            :on-close on-close-fn})))

(defn ensure-timer!
  "Ensure there is a timer that triggers the draw"
  [sketch]
  (let [internal-state (:internal-state sketch)
        timer-ref (:timer-ref @internal-state)]
    (when-not timer-ref
      (swap! internal-state
             assoc
             :timer-ref
             (u/create-timer default-frame-rate)))))

;; Callbacks

(defn handle_sync_event
  [wx obj sketch]
  (render sketch u/no-fn :paint)
  :ok)

(def event->handler
  {:wxClose :on-close
   :wxSize  :on-resize})

(defn handle_event
  [wx sketch]
  (let* [#erl[:wx id obj data event] wx
         event-type (-> (first event)
                        event->handler)]
    (case* event-type
      :on-close
      (u/stop ((sketch :on-close) sketch))
      _
      (u/noreply
       (if-let [handler (sketch event-type)]
         (handler sketch)
         sketch)))))

(defn* handle_info
  ([:setup sketch]
   (let [sketch (render sketch (:setup-fn sketch) :draw)]
     (ensure-timer! sketch)
     (u/noreply sketch)))
  ([:draw sketch]
   (let [sketch (render sketch (:draw-fn sketch) :draw)]
     (u/noreply sketch)))
  ([wx sketch]
   (u/noreply sketch)))

(defn init [opts]
  (let [{frame :frame :as sketch} (make-sketch opts)]
    #erl[frame sketch]))
