(ns doodler.protocols)

(defprotocol ICanvas
  (canvas [this])
  (width [this])
  (height [this]))

(defprotocol IBitmap
  (create-image [this w h])
  (load-image [this filename])
  (image [this img x y] [this img x y w h])
  (get-pixel [this] [this img] [this x y] [this img x y] [this x y w h] [this img x y w h])
  (pixels [this] [this img])
  (resize [this img w h]))

(defprotocol IPrimitives
  (arc [this x y w h start end])
  (ellipse [this x y w h])
  (bezier [this x1 y1 cx1 cy1 cx2 cy2 x2 y2])
  (line [this p1 p2] [this x1 y1 x2 y2] [this x1 y1 z1 x2 y2 z2])
  (point [this x y] [this x y z])
  (quad [this x1 y1 x2 y2 x3 y3 x4 y4])
  (rect [this x y w h] [this x y w h r])
  (triangle [this x1 y1 x2 y2 x3 y3]))

(defprotocol IPrimitives3D
  (camera [this eye-x eye-y eye-z center-x center-y center-z up-x up-y up-z])
  (frustum [this left right bottom top near far])
  (ortho [this left right bottom top near far])
  (perspective [this fovy aspect z-near z-far])
  (box [this size] [this width height depth])
  (cone [this radius height detail-x detail-y cap])
  (cylinder [this radius height detail-x detail-y bottom-cap top-cap])
  (ellipsoid [this radius-x radius-y radius-z detail-x detail-y])
  (plane [this width height])
  (sphere [this radius slices stacks])
  (torus [this radius tube-radius detail-x detail-y]))

(defprotocol IText
  (text [this s x y]))

(defprotocol IPen
  (stroke [this color])
  (stroke-weight [this weight])
  (stroke-cap [this cap-mode])
  (stroke-join [this join-mode])
  (no-stroke [this]))

(defprotocol IFill
  (fill [this color])
  (no-fill [this]))

(defprotocol IBackground
  (background [this color])
  (background-image [this img x y]))

(defprotocol IEvents
  (pre-draw [this])
  (post-draw [this])
  (paint [this])
  (refresh [this])
  (resize-canvas [this]))

(defprotocol ITransform
  (push-matrix [this])
  (pop-matrix [this])
  (apply-matrix
    [this a b c d tx ty]
    [this [n00 n01 n02 n03
           n10 n11 n12 n13
           n20 n21 n22 n23
           n30 n31 n32 n33]])
  (reset-matrix [this])
  (print-camera [this])
  (print-matrix [this])
  (print-projection [this])
  (rotate [this angle] [this angle vx vy vz])
  (scale [this x-scale y-scale] [this x-scale y-scale z-scale])
  (translate [this x y] [this x y z]))

(defprotocol IShape
  (begin-shape [this] [this mode])
  (end-shape [this] [this mode])
  (vertex [this x y] [this x y z])
  (bezier-vertex [this cx1 cy1 cx2 cy2 x y])
  (quadratic-vertex [this cx cy x3 y3]))

(defn show-unsupported-warning!
  [name]
  (binding [*out* *err*]
    (println "Warning:" name "is currently not available for this canvas.")))
