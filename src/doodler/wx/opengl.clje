(ns doodler.wx.opengl
  (:require [doodler.protocols :as p]
            [doodler.core :as core]
            [doodler.wx.gui :as gui]))

(declare init-panel)

(deftype OpenGLCanvas [canvas context width height]
  p/ICanvas
  (canvas [this] canvas)
  (width [this] width)
  (height [this] height)

  p/IBitmap
  (create-image [this w h]
    ;; TODO
    )

  p/IPrimitives
  (arc [this x y w h start end]
    (let [r (/ (math/sqrt (+ (* w w) (* h h))) 2)]
      (doodler_gl/arc (float x) (float y)
                      r
                      (core/degrees start)
                      (core/degrees (- end start)))))
  (ellipse [this x y w h]
    (doodler_gl/circle (float x) (float y)
                       (/ w 2)))
  (bezier [this x1 y1 cx1 cy1 cx2 cy2 x2 y2]
    (p/show-unsupported-warning! "bezier"))
  (line [this x1 y1 x2 y2]
    (doodler_gl/line (float x1) (float y1)
                     (float x2) (float y2)))
  (line [this x1 y1 z1 x2 y2 z2]
    (doodler_gl/line (float x1) (float y1) (float z1)
                     (float x2) (float y2) (float z2)))
  (point [this x y]
    (doodler_gl/point (float x) (float y)))
  (point [this x y z]
    (doodler_gl/point (float x) (float y) (float z)))
  (quad [this x1 y1 x2 y2 x3 y3 x4 y4]
    (doodler_gl/quad (float x1) (float y1)
                     (float x2) (float y2)
                     (float x3) (float y3)
                     (float x4) (float y4)))
  (rect [this x y w h]
    (doodler_gl/rect (float x) (float y)
                     (float w) (float h)))
  (rect [this x y w h r]
    ;; TODO: implement rounded rectangles
    (doodler_gl/rect (float x) (float y)
                     (float w) (float h)))
  (triangle [this x1 y1 x2 y2 x3 y3]
    (doodler_gl/triangle (float x1) (float y1)
                         (float x2) (float y2)
                         (float x3) (float y3)))

  p/IPrimitives3D
  (camera [this eye-x eye-y eye-z center-x center-y center-z up-x up-y up-z]
    (doodler_gl/matrix_mode :modelview)
    (gl/loadIdentity)
    (glu/lookAt (float eye-x) (float eye-y) (float eye-z)
                (float center-x) (float center-y) (float center-z)
                (float up-x) (float up-y) (float up-z)))
  (frustum [this left right bottom top near far]
    (doodler_gl/matrix_mode :projection)
    (gl/loadIdentity)
    (gl/frustum (float left) (float right)
                (float bottom) (float top)
                (float near) (float far))
    (doodler_gl/matrix_mode :modelview))
  (ortho [this left right bottom top near far]
    (doodler_gl/matrix_mode :projection)
    (gl/loadIdentity)
    (gl/ortho (float left) (float right)
              (float bottom) (float top)
              (float near) (float far))
    (doodler_gl/matrix_mode :modelview))
  (perspective [this fovy aspect z-near z-far]
    (doodler_gl/matrix_mode :projection)
    (gl/loadIdentity)
    (glu/perspective (core/degrees (float fovy))
                     (float aspect)
                     (float z-near)
                     (float z-far))
    (doodler_gl/matrix_mode :modelview))

  (box [this size]
    (p/box this size size size))
  (box [this w h d]
    (let [x1 (/ w 2) x2 (- x1)
          y1 (/ h 2) y2 (- y1)
          z1 (/ d 2) z2 (- z1)]
      ;; back face
      (doodler_gl/quad x1 y1 z1
                       x1 y2 z1
                       x2 y2 z1
                       x2 y1 z1)
      ;; front face
      (doodler_gl/quad x1 y2 z2
                       x1 y1 z2
                       x2 y1 z2
                       x2 y2 z2)
      ;; right face
      (doodler_gl/quad x2 y1 z1
                       x2 y2 z1
                       x2 y2 z2
                       x2 y1 z2)
      ;; left face
      (doodler_gl/quad x1 y2 z1
                       x1 y1 z1
                       x1 y1 z2
                       x1 y2 z2)
      ;; top face
      (doodler_gl/quad x2 y1 z1
                       x2 y1 z2
                       x1 y1 z2
                       x1 y1 z1)
      ;; bottom face
      (doodler_gl/quad x1 y2 z1
                       x1 y2 z2
                       x2 y2 z2
                       x2 y2 z1)))
  (cone [this radius height- detail-x detail-y cap]
    (doodler_gl/cone (float radius) (float height-) detail-x detail-y cap))
  (cylinder [this radius height- detail-x detail-y bottom-cap top-cap]
    (doodler_gl/cylinder (float radius) (float height-)
                         detail-x detail-y
                         bottom-cap top-cap))
  (sphere [this radius slices stacks]
    (doodler_gl/sphere (float radius) slices stacks))

  p/IText
  (text [this s x y]
    ;; TODO
    )

  p/IPen
  (stroke [this color]
    (doodler_gl/stroke color))
  (stroke-weight [this weight]
    ;; TODO
    )
  (stroke-cap [this cap-mode]
    ;; TODO
    )
  (stroke-join [this join-mode]
    ;; TODO
    )
  (no-stroke [this]
    (doodler_gl/stroke nil))

  p/IFill
  (fill [this color]
    (doodler_gl/fill color))
  (no-fill [this]
    (doodler_gl/fill nil))

  p/IBackground
  (background [this color]
    (doodler_gl/background color))
  (background-image [this img x y]
    ;; TODO
    )

  p/IEvents
  (pre-draw [this]
    (wxGLCanvas/setCurrent canvas context))
  (post-draw [this])
  (paint [this]
    ;; Setting the context is necessary because the painting
    ;; happens in a different process than the drawing.
    (wxGLCanvas/setCurrent canvas context)
    (wxGLCanvas/swapBuffers canvas))
  (refresh [this]
    (wxWindow/refresh canvas
                      #erl(#erl[:eraseBackground false])))
  (resize [this]
    (let [[width height] (doodler_gl/resize canvas context)]
      (OpenGLCanvas. canvas context width height)))

  p/ITransform
  (push-matrix [this]
    (gl/pushMatrix))
  (pop-matrix [this]
    (gl/popMatrix))
  (apply-matrix [this a b c d tx ty]
    (gl/multMatrixf #erl[a   b   0.0 0.0
                         c   d   0.0 0.0
                         0.0 0.0 1.0 0.0
                         tx  ty  0.0 1.0]))
  (apply-matrix
    [this
     n00 n01 n02 n03
     n10 n11 n12 n13
     n20 n21 n22 n23
     n30 n31 n32 n33]
    (gl/multMatrixf #erl[n00 n01 n02 n03
                         n10 n11 n12 n13
                         n20 n21 n22 n23
                         n30 n31 n32 n33]))
  (reset-matrix [this]
    (gl/loadIdentity))
  (print-camera [this]
    (->> (doodler_gl/current_matrix :modelview)
         (apply println "Camera matrix:")))
  (print-matrix [this]
    (->> (doodler_gl/current_matrix)
         (apply println "Current matrix:")))
  (print-projection [this]
    (->> (doodler_gl/current_matrix :projection)
         (apply println "Projection matrix:")))
  (rotate [this angle]
    (gl/rotatef (core/degrees angle) 0.0 0.0 1.0))
  (rotate [this angle x y z]
    (gl/rotatef (core/degrees angle) (float x) (float y) (float z)))
  (scale [this x-scale y-scale]
    (gl/scalef (float x-scale) (float y-scale) 1.0))
  (scale [this x-scale y-scale z-scale]
    (gl/scalef (float x-scale) (float y-scale) (float z-scale)))
  (translate [this x y]
    (gl/translatef (float x) (float y) 0.0))
  (translate [this x y z]
    (gl/translatef (float x) (float y) (float z)))

  p/IShape
  (begin-shape [this]
    (doodler_gl/begin_shape))
  (begin-shape [this mode]
    (doodler_gl/begin_shape mode))
  (end-shape [this]
    (doodler_gl/end_shape))
  (vertex [this x y]
    (doodler_gl/vertex (float x) (float y)))
  (vertex [this x y z]
    (doodler_gl/vertex (float x) (float y) (float z)))
  (bezier-vertex [this cx1 cy1 cx2 cy2 x y]
    (p/show-unsupported-warning! "bezier-vertex"))
  (quadratic-vertex [this cx cy x3 y3]
    (p/show-unsupported-warning! "quadratic-vertex")))

(defn make-canvas
  "Creates an OpenGL canvas the same size as the provided canvas.
  Returns an OpenGLCanvas which contains all related information to
  avoid having to fetch it while drawing.

    canvas        OpenGL canvas
    context       OpenGL context

    width         Bitmap's width
    height        Bitmap's height"
  [frame bgcolor]
  (let [[canvas context] (doodler_gl/canvas frame bgcolor)
        [width height] (wxWindow/getSize frame)]
    (->OpenGLCanvas canvas context width height)))
