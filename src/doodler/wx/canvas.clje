(ns doodler.wx.canvas
  (:require [doodler.protocols :as p]
            [doodler.core :as core]
            [doodler.wx.gui :as gui]))

(deftype Canvas [canvas buffer pen brush]
  p/IBitmap
  (draw-bitmap [this img x y]
    (wxDC/drawBitmap buffer img #erl[x y]))
  (create-image [this w h]
    (wxBitmap/new w h))

  p/IPrimitives
  (arc [this x y w h start end]
    (wxDC/drawEllipticArc
     this
     (core/translate #erl[(- x (erlang/div w 2)) (- y (erlang/div h 2))])
     #erl[w h]
     start end))
  (ellipse [this x y w h]
    (wxDC/drawEllipse
     this
     (core/translate #erl[(- x (erlang/div w 2)) (- y (erlang/div h 2))])
     #erl[w h]))
  (line [this x1 y1 x2 y2]
    (wxDC/drawLine this
                   (core/translate #erl[x1 y1])
                   (core/translate #erl[x2 y2])))
  (point [this x y]
    (wxDC/drawPoint this (core/translate #erl[x y])))
  (quad [this x1 y1 x2 y2 x3 y3 x4 y4]
    (wxDC/drawLine this
                   (core/translate #erl[x1 y1])
                   (core/translate #erl[x2 y2]))
    (wxDC/drawLine this
                   (core/translate #erl[x2 y2])
                   (core/translate #erl[x3 y3]))
    (wxDC/drawLine this
                   (core/translate #erl[x3 y3])
                   (core/translate #erl[x4 y4]))
    (wxDC/drawLine this
                   (core/translate #erl[x4 y4])
                   (core/translate #erl[x1 y1])))
  (rect [this x y w h]
    (wxDC/drawRectangle this
                        (core/translate #erl[x y])
                        #erl[w h]))
  (rect [this x y w h r]
    (wxDC/drawRoundedRectangle this
                               (core/translate #erl[x y])
                               #erl[w h]
                               r))
  (triangle [this x1 y1 x2 y2 x3 y3]
    (wxDC/drawLine this
                   (core/translate #erl[x1 y1])
                   (core/translate #erl[x2 y2]))
    (wxDC/drawLine this
                   (core/translate #erl[x2 y2])
                   (core/translate #erl[x3 y3]))
    (wxDC/drawLine this
                   (core/translate #erl[x3 y3])
                   (core/translate #erl[x1 y1])))

  p/IPen
  (stroke [this color]
    (wxPen/setColour pen color)
    (wxDC/setPen buffer pen))
  (stroke-weight [this weight]
    (wxPen/setWidth pen weight)
    (wxDC/setPen buffer pen))
  (stroke-cap [this cap-mode]
    (wxPen/setCap pen (gui/->stroke-cap cap-mode))
    (wxDC/setPen buffer pen))
  (stroke-join [this join-mode]
    (wxPen/setJoin pen (gui/->stroke-join join-mode))
    (wxDC/setPen buffer pen))
  (no-stroke [this]
    (wxDC/setPen buffer (wxPen/new)))

  p/IFill
  (fill [this color]
    (wxBrush/setColour brush color)
    (wxDC/setBrush buffer brush))
  (no-fill [this]
    (wxDC/setBrush buffer (wxBrush/new)))
  )

(defn make-canvas
  [frame]
  (Canvas. (wxPanel/new frame)))
